server.port=30001
server.tomcat.threads.max=${SERVER_MAX_THREADS:400}
management.endpoints.web.exposure.include=*


# DataSource para testes
spring.datasource.url=jdbc:h2:mem:user_db;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL;INIT=CREATE SCHEMA IF NOT EXISTS user_db
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.show-sql=true

# banco de testes
spring.datasource.platform=h2
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.default_schema=user_db
spring.jpa.hibernate.ddl-auto=create-drop
spring.h2.console.enabled=true
spring.h2.console.path=/h2

# DataSource para testes
spring.datasource.url=jdbc:h2:mem:user_db;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL;INIT=CREATE SCHEMA IF NOT EXISTS user_db
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.show-sql=true

# banco de testes
spring.datasource.platform=h2
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.default_schema=user_db
spring.jpa.hibernate.ddl-auto=create-drop
spring.h2.console.enabled=true
spring.h2.console.path=/h2

# configurações do pool do banco
spring.datasource.hikari.connectionTimeout=${DB_CONN_TIMEOUT:1000}
spring.datasource.hikari.validationTimeout=${DB_VALIDATION_TIMEOUT:1000}
spring.datasource.hikari.maxLifetime=${DB_MAX_LIFE_TIME:1800000}
spring.datasource.hikari.leakDetectionThreshold=5
spring.datasource.hikari.connectionTestQuery=select 1
spring.datasource.hikari.maximumPoolSize=${DB_POOL_SIZE:3}

# kafka topics
topic.user-changed=user.changed.e16
topic.email-domain-count=email-domain.changes.count.e16

# kafka
kafka.bootstrapAddress=${KAFKA_HOST:localhost}:9092
kafka.consumer.groupId=sample-app-consumer
kafka.schemaRegistryUrl=http://${KAFKA_SCHEMA_REG_HOST:localhost}:8081

# kafka stream
spring.cloud.stream.kafka.streams.binder.configuration.schema.registry.url=${kafka.schemaRegistryUrl}
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000

spring.cloud.stream.bindings.emailDomainCount-in-0.destination=${topic.user-changed}
spring.cloud.stream.bindings.emailDomainCount-out-0.destination=${topic.email-domain-count}
